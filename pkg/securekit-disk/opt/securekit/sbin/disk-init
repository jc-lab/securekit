#!/bin/bash

. /opt/securekit/share/securekit-disk-functions.sh

info "========== SECUREKIT =========="

disk=$1
shift

dm_name=""
partition_style="o"
storage_mount_dir=""
meta_mount_dir=""

while [ $# -gt 0 ]; do
    case "$1" in
        --name)
            shift
            dm_name="$1"
            ;;
        --help)
            echo "$0 DEVICE --name DM_NAME [--gpt|--mbr]"
            exit 0
            ;;
        --mbr)
            partition_style="o"
            ;;
        --gpt)
            partition_style="g"
            ;;
        --mount)
            shift
            storage_mount_dir="$1"
            ;;
        --mount-meta)
            shift
            meta_mount_dir="$1"
            ;;
      *)
            >&2 info "invalid argument: $*"
            exit 1
            ;;
    esac
    shift
done

sfdisk -d $disk
has_partition=$?

temp_dir=/tmp/.init
p1_dir=${meta_mount_dir:-/tmp/.p1}

mkdir -p ${temp_dir} ${p1_dir}

mount -t ramfs ramfs ${temp_dir}

cd ${temp_dir}

# TODO: REMOVE init
backup_fs_key_file=${p1_dir}/backup_fs_key.asc
backup_plain_key_file=${temp_dir}/backup_key.plain
tpm_plain_key_file=${temp_dir}/tpm_slot_key.plain

tpm_seal_pcr_policy="sha256:0,2,4"

function cleanupSession() {
    if [ -e session.ctx ]; then
        tpm2_flushcontext session.ctx
        rm session.ctx
    fi
}

function unsealKeyByTPM() {
    local output=$1
    set -e
    tpm2_createprimary -Q -C o -c tpm-primary.ctx
    tpm2_load -Q -C tpm-primary.ctx -u ${p1_dir}/seal.pub -r ${p1_dir}/seal.priv -c tpm-seal.ctx
    tpm2_startauthsession -Q --hmac-session -c tpm-primary.ctx -S session.ctx
    tpm2_unseal -Q -p pcr:${tpm_seal_pcr_policy} -c tpm-seal.ctx -o ${output}
    cleanupSession
    return 0
}

function sealKeyByTPM() {
    local tpm_plain_key_file=$1
    set -e
    tpm2_createprimary -Q -C o -c tpm-primary.ctx
    tpm2_startauthsession -Q --hmac-session -c tpm-primary.ctx -S session.ctx
    tpm2_pcrread -Q ${tpm_seal_pcr_policy} -o pcr.digest
    tpm2_createpolicy -Q --policy-pcr -l ${tpm_seal_pcr_policy} -f pcr.digest -L pcr.policy
    tpm2_create -Q -g sha256 -u ${p1_dir}/seal.pub -r ${p1_dir}/seal.priv -i ${tpm_plain_key_file} -C tpm-primary.ctx -S session.ctx -L pcr.policy
    cleanupSession
    return 0
}

function failure() {
    sleep 60
    poweroff -f
    info "PLEASE POWER OFF!!!"
    while [ 1 ]; do
        sleep 1
    done
    exit 1
}

if [ ! $has_partition -eq 0 ]; then
    # If empty disk
    info "DISK INITIALIZING... This may take some time."

    # generate keys
    dd if=/dev/urandom bs=1 count=32 of=${backup_plain_key_file}
    dd if=/dev/urandom bs=1 count=32 of=${tpm_plain_key_file}

    # format
    printf "${partition_style}\nn\np\n1\n\n+100M\nn\np\n2\n\n\np\nw\n" | fdisk $disk
    mkfs.ext4 ${disk}1
    mount ${disk}1 ${p1_dir}

    # seal key by TPM
    (info_func sealKeyByTPM "${tpm_plain_key_file}")
    seal_rc=$?
    cleanupSession

    if [ ! $seal_rc -eq 0 ]; then
        info "********** TPM SEAL FAILED!!! **********"
        failure
    fi

    # backup key
    gpg2 --recipient-file /fs_protector_key.public.asc --armor --output ${backup_fs_key_file} --encrypt ${backup_plain_key_file}

    # luks format
    info "please wait for luksFormat..."
    info_execute cryptsetup -q --type luks2 --key-size 256 luksFormat ${disk}2 ${backup_plain_key_file}
    info_execute cryptsetup -q luksAddKey --key-file=${backup_plain_key_file} ${disk}2 ${tpm_plain_key_file}
    shred ${backup_plain_key_file}
    
    info_execute cryptsetup -q luksOpen --key-file=${tpm_plain_key_file} ${disk}2 "${dm_name}"
    shred ${tpm_plain_key_file}

    mkfs.ext4 "/dev/mapper/${dm_name}"
else
    mount ${disk}1 ${p1_dir}
    
    (info_func unsealKeyByTPM "${tpm_plain_key_file}")
    unseal_rc=$?
    info "unseal_rc = ${unseal_rc}"
    cleanupSession

    if [ $unseal_rc -eq 0 ]; then
        info_execute cryptsetup -q luksOpen --key-file=${tpm_plain_key_file} ${disk}2 "${dm_name}"
        shred ${tpm_plain_key_file}

        info "********** TPM UNSEAL SUCCESS!!! **********"
    else
        [ -e ${tpm_plain_key_file} ] && shred ${tpm_plain_key_file}

        info "******************************************"
        info "********** TPM UNSEAL FAILED!!! **********"
        info "********** NEED TPM RE-SEALING  **********"
        info "******************************************"

        info "Finding fs_protector_key.private.asc"
        result_lines=$(find_volume_by_file "fs_protector_key.private.asc" "${disk}")
        result_rc=$?

        if [ ! $result_rc -eq 0 ]; then
            info "Could not find 'fs_protector_key.private.asc' file:"
            info_execute blkid
            failure
        fi

        mount_path=$(echo "${result_lines}" | cut -d$'\n' -f1)
        found_file=$(echo "${result_lines}" | cut -d$'\n' -f2)
        info "found private key on [${disk} :: ${mount_path} :: ${found_file}]"

        # seal key by TPM
        dd if=/dev/urandom bs=1 count=32 of=${tpm_plain_key_file}
        (info_func sealKeyByTPM "${tpm_plain_key_file}")
        seal_rc=$?
        [ -e session.ctx ] && tpm2_flushcontext session.ctx
        
        if [ ! $seal_rc -eq 0 ]; then
            info "********** TPM SEAL FAILED!!! **********"
            failure
        fi

        interactive_ready
        interactive_execute sq decrypt --recipient-key ${found_file} --output ${backup_plain_key_file} ${backup_fs_key_file}
        info_execute cryptsetup -q luksKillSlot --key-file=${backup_plain_key_file} ${disk}2 1
        info "Please wait for luksAddKey"
        info_execute cryptsetup -q luksAddKey --key-file=${backup_plain_key_file} ${disk}2 ${tpm_plain_key_file}
        shred ${backup_plain_key_file}
        info_execute cryptsetup -q luksOpen --key-file=${tpm_plain_key_file} ${disk}2 "${dm_name}"
        shred ${tpm_plain_key_file}

        info_execute umount ${mount_path}
    fi
fi

if [ -n "${storage_mount_dir}" ]; then
    mkdir -p ${storage_mount_dir}
    info_execute mount "/dev/mapper/${dm_name}" "${storage_mount_dir}"
fi

sync

[ -e "${backup_plain_key_file}" ] && shred -f ${backup_plain_key_file}

cd /
info_execute umount ${temp_dir}

if [ -z "${meta_mount_dir}" ]; then
    info_execute umount ${p1_dir}
else
   info_execute mount -o remount,ro ${meta_mount_dir}
fi

sync

exit 0
